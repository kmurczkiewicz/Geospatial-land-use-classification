:py:mod:`nn_library.topologies`
===============================

.. py:module:: nn_library.topologies


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   nn_library.topologies.TEST_TOPOLOGY
   nn_library.topologies.topology_A
   nn_library.topologies.topology_B
   nn_library.topologies.topology_C
   nn_library.topologies.topology_D



.. py:function:: TEST_TOPOLOGY(input_shape, num_of_classes)

   Function that initializes ANN (Artificial Neural Network) model using TEST_TOPOLOGY.
   Multidimensional input (image in numpy array type) is converted to one dimension. Only hidden dense layers.

   :param input_shape: input shape for the model
   :param num_of_classes: number of output classes for the model
   :return: ANN model


.. py:function:: topology_A(input_shape, num_of_classes)

   Function that initializes ANN (Artificial Neural Network) model using A topology.
   Multidimensional input (image in numpy array type) is converted to one dimension. Only hidden dense layers.

   :param input_shape: input shape for the model
   :param num_of_classes: number of output classes for the model
   :return: ANN model


.. py:function:: topology_B(input_shape, num_of_classes)

   Function that initializes small CNN (Convolutional Neural Network) model using B topology.

   :param input_shape: input shape for the model
   :param num_of_classes: number of output classes for the model
   :return: CNN model


.. py:function:: topology_C(input_shape, num_of_classes)

   Function that initializes CNN (Convolutional Neural Network) model using C topology.

   :param input_shape: input shape for the model
   :param num_of_classes: number of output classes for the model
   :return: CNN model


.. py:function:: topology_D(input_shape, num_of_classes)

   Function that initializes CNN (Convolutional Neural Network) model using D topology.

   :param input_shape: input shape for the model
   :param num_of_classes: number of output classes for the model
   :return: CNN model


