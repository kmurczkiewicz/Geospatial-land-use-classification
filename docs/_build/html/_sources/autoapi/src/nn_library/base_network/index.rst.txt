:py:mod:`src.nn_library.base_network`
=====================================

.. py:module:: src.nn_library.base_network


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   src.nn_library.base_network.Neural_network




.. py:class:: Neural_network(nn_architecture=src.nn_library.nn_architectures.architecture_A, input_shape=(64, 64, 3))

   Class to unify and optimize creation of neural networks using different set of parameters.

   .. py:method:: compile(self, optimizer, loss_function, metrics)

      Function to compile network using given params.

      :param optimizer: str optimizer name to be used in compilation
      :param loss_function: tf.keras.losses object to measure loss funtionc
      :param metrics: array of metrics to be measured


   .. py:method:: train_cnn_model(self, data: dict, epochs_num: int, checkpoint_filepath, batch_size)

      Function to train network using given params.

      :param data: dict of test, train and validation data to be used in training
      :param epochs_num: number of training iterations
      :param checkpoint_filepath: str path to model checkpoint object
      :param batch_size: batch size


   .. py:method:: test_network(self, data: dict, label_map, plot_probability)

      Function to test network on given data.

      :param data: dict of test, train and validation data to be used in training
      :param plot_probability: bool to define if class probability heatmap should be displayed
      :return: str network testing accuracy


   .. py:method:: init_network(self, layer_activation_function)

      Function to initialize network object architecture.

      :param layer_activation_function: str name of nn layer activation function


   .. py:method:: plot_test_confusion_matrix(self, y_true, y_predicted, class_labels)

      Function to display confusion matrix for network class predictions

      :param y_true: original class labels
      :param y_predicted: class labels predicted by models
      :param class_labels: list of all class labels


   .. py:method:: plot_model_result(self, mode, figure_num, text)

      Function to plot network accuracy and loss function value over training (epochs).

      :param mode: str plotting mode, could be 'accuracy' or 'loss'
      :param figure_num: int number defining which plot to use


   .. py:method:: save_model(self, name, directory)

      Function to save network in given directory with given name in .pb format, and
      .json file containing network details.

      :param name: network file name that will be saved
      :param directory: directory where network file will be saved


   .. py:method:: single_class_prediction(self, input)

      Function to perform prediction on given image.

      :param input: image form of numpy array
      :return: predicted class value


   .. py:method:: measure(self, data)



